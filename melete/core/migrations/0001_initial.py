# Generated by Django 2.2.11 on 2020-03-13 01:56

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Asset',
            fields=[
                ('id', models.AutoField(db_column='id', primary_key=True, serialize=False)),
                ('enter_date', models.DateTimeField(db_column='enter_date')),
                ('exit_date', models.DateTimeField(db_column='exit_date', null=True)),
                ('expiration_date', models.DateTimeField(db_column='expiration_date', null=True)),
                ('quantity', models.FloatField(db_column='quantity')),
                ('premium', models.FloatField(db_column='premium', default=0, null=True)),
                ('price', models.FloatField(db_column='price')),
            ],
            options={
                'db_table': 'asset',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='AssetType',
            fields=[
                ('id', models.AutoField(db_column='id', primary_key=True, serialize=False)),
                ('name', models.CharField(db_column='name', max_length=255)),
                ('description', models.CharField(db_column='description', max_length=255, null=True)),
            ],
            options={
                'db_table': 'asset_type',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Credentials',
            fields=[
                ('id', models.AutoField(db_column='id', primary_key=True, serialize=False)),
                ('email', models.CharField(db_column='email', max_length=510)),
                ('username', models.CharField(db_column='username', max_length=510)),
                ('password', models.CharField(db_column='password', max_length=510)),
            ],
            options={
                'db_table': 'credentials',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Dataframe',
            fields=[
                ('id', models.AutoField(db_column='id', primary_key=True, serialize=False)),
                ('name', models.CharField(db_column='name', max_length=255)),
                ('description', models.CharField(db_column='description', max_length=510, null=True)),
                ('params', models.TextField(db_column='params')),
            ],
            options={
                'db_table': 'dataframe',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Entity',
            fields=[
                ('id', models.AutoField(db_column='id', primary_key=True, serialize=False)),
                ('name', models.CharField(db_column='name', max_length=510)),
                ('description', models.CharField(blank=True, db_column='description', max_length=1020, null=True)),
                ('polymorphic_ctype', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='polymorphic_core.entity_set+', to='contenttypes.ContentType')),
            ],
            options={
                'db_table': 'entity',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='ErrorType',
            fields=[
                ('id', models.AutoField(db_column='id', primary_key=True, serialize=False)),
                ('name', models.CharField(db_column='name', max_length=255)),
                ('description', models.CharField(db_column='description', max_length=510, null=True)),
            ],
            options={
                'db_table': 'error_type',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Fill',
            fields=[
                ('id', models.AutoField(db_column='id', primary_key=True, serialize=False)),
                ('name', models.CharField(db_column='name', max_length=255)),
                ('description', models.CharField(db_column='description', max_length=255, null=True)),
            ],
            options={
                'db_table': 'fill',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Frequency',
            fields=[
                ('id', models.AutoField(db_column='id', primary_key=True, serialize=False)),
                ('name', models.CharField(db_column='name', max_length=255)),
                ('description', models.CharField(db_column='description', max_length=255, null=True)),
            ],
            options={
                'db_table': 'frequency',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Function',
            fields=[
                ('id', models.AutoField(db_column='id', primary_key=True, serialize=False)),
                ('name', models.CharField(db_column='name', max_length=255)),
                ('description', models.CharField(db_column='description', max_length=255, null=True)),
            ],
            options={
                'db_table': 'function',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Language',
            fields=[
                ('id', models.AutoField(db_column='id', primary_key=True, serialize=False)),
                ('name', models.CharField(db_column='name', max_length=255)),
                ('description', models.CharField(db_column='description', max_length=1020)),
            ],
            options={
                'db_table': 'language',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Metric',
            fields=[
                ('id', models.AutoField(db_column='id', primary_key=True, serialize=False)),
                ('name', models.CharField(db_column='name', max_length=255)),
                ('description', models.CharField(db_column='description', max_length=510)),
            ],
            options={
                'db_table': 'metric',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Model',
            fields=[
                ('id', models.AutoField(db_column='id', primary_key=True, serialize=False)),
                ('created_date', models.DateTimeField(db_column='created_date', null=True)),
                ('last_seen_date', models.DateTimeField(db_column='last_seen_date')),
                ('last_trained_date', models.DateTimeField(db_column='last_trained_date')),
                ('last_tested_date', models.DateTimeField(db_column='last_tested_date')),
                ('file_path', models.CharField(db_column='file_path', max_length=10000)),
                ('keras_json', models.TextField(db_column='keras_json', null=True)),
            ],
            options={
                'db_table': 'model',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='ModelConfig',
            fields=[
                ('id', models.AutoField(db_column='id', primary_key=True, serialize=False)),
                ('name', models.CharField(db_column='name', max_length=255)),
                ('description', models.CharField(db_column='description', max_length=510, null=True)),
                ('params', models.TextField(db_column='params')),
                ('version', models.CharField(db_column='version', max_length=20)),
            ],
            options={
                'db_table': 'model_config',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='OrderType',
            fields=[
                ('id', models.AutoField(db_column='id', primary_key=True, serialize=False)),
                ('name', models.CharField(db_column='name', max_length=255)),
                ('description', models.CharField(db_column='description', max_length=255, null=True)),
            ],
            options={
                'db_table': 'order_type',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Portfolio',
            fields=[
                ('id', models.AutoField(db_column='id', primary_key=True, serialize=False)),
                ('name', models.CharField(db_column='name', max_length=255)),
                ('created', models.DateTimeField(db_column='created', default=django.utils.timezone.now, null=True)),
                ('modified', models.DateTimeField(db_column='modified', null=True)),
                ('details', models.TextField(db_column='details', null=True)),
            ],
            options={
                'db_table': 'portfolio',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='PortfolioPermission',
            fields=[
                ('id', models.AutoField(db_column='id', primary_key=True, serialize=False)),
                ('name', models.CharField(db_column='name', max_length=255)),
                ('description', models.CharField(db_column='description', max_length=255, null=True)),
            ],
            options={
                'db_table': 'portfolio_permission',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='PredictionSet',
            fields=[
                ('id', models.AutoField(db_column='id', primary_key=True, serialize=False)),
                ('date_created', models.DateTimeField(db_column='date_created', null=True)),
                ('error', models.FloatField(db_column='error')),
                ('entity', models.ForeignKey(db_column='entity_id', on_delete=django.db.models.deletion.DO_NOTHING, to='core.Entity')),
                ('model', models.ForeignKey(db_column='model_id', on_delete=django.db.models.deletion.DO_NOTHING, to='core.Model')),
            ],
            options={
                'db_table': 'prediction_set',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Source',
            fields=[
                ('id', models.AutoField(db_column='id', primary_key=True, serialize=False)),
                ('type', models.CharField(db_column='type', max_length=255)),
                ('name', models.CharField(db_column='name', max_length=255)),
                ('description', models.CharField(blank=True, db_column='description', max_length=1020, null=True)),
                ('url', models.CharField(db_column='url', max_length=2040)),
            ],
            options={
                'db_table': 'source',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.AutoField(db_column='id', primary_key=True, serialize=False)),
                ('name', models.CharField(db_column='name', max_length=510)),
                ('description', models.CharField(blank=True, db_column='description', max_length=1020, null=True)),
            ],
            options={
                'db_table': 'tag',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='TagGroup',
            fields=[
                ('id', models.AutoField(db_column='id', primary_key=True, serialize=False)),
                ('name', models.CharField(db_column='name', max_length=510)),
                ('description', models.CharField(blank=True, db_column='description', max_length=1020, null=True)),
            ],
            options={
                'db_table': 'tag_group',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Thread',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_processed', models.DateTimeField(db_column='date_processed')),
                ('source', models.ForeignKey(db_column='source_id', on_delete=django.db.models.deletion.DO_NOTHING, to='core.Source')),
            ],
            options={
                'db_table': 'thread',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='ThreadSeries',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_processed', models.DateTimeField(db_column='date_processed')),
                ('source', models.ForeignKey(db_column='source_id', on_delete=django.db.models.deletion.DO_NOTHING, to='core.Source')),
            ],
            options={
                'db_table': 'thread_series',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Company',
            fields=[
                ('entity_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='core.Entity')),
                ('sector', models.CharField(db_column='sector', max_length=255, null=True)),
                ('industry', models.CharField(db_column='industry', max_length=255, null=True)),
                ('ipo_year', models.IntegerField(db_column='ipo_year', null=True)),
            ],
            options={
                'db_table': 'company',
                'managed': True,
            },
            bases=('core.entity',),
        ),
        migrations.CreateModel(
            name='Country',
            fields=[
                ('entity_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='core.Entity')),
            ],
            options={
                'db_table': 'country',
                'managed': True,
            },
            bases=('core.entity',),
        ),
        migrations.CreateModel(
            name='Currency',
            fields=[
                ('entity_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='core.Entity')),
                ('symbol', models.CharField(db_column='symbol', max_length=25)),
            ],
            options={
                'db_table': 'currency',
                'managed': True,
            },
            bases=('core.entity',),
        ),
        migrations.CreateModel(
            name='Exchange',
            fields=[
                ('entity_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='core.Entity')),
                ('symbol', models.CharField(db_column='symbol', max_length=10)),
            ],
            options={
                'db_table': 'exchange',
                'managed': True,
            },
            bases=('core.entity',),
        ),
        migrations.CreateModel(
            name='Index',
            fields=[
                ('entity_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='core.Entity')),
            ],
            options={
                'db_table': 'index',
                'managed': True,
            },
            bases=('core.entity',),
        ),
        migrations.CreateModel(
            name='Person',
            fields=[
                ('entity_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='core.Entity')),
                ('first_name', models.CharField(db_column='first_name', max_length=500)),
                ('last_name', models.CharField(db_column='last_name', max_length=500)),
            ],
            options={
                'db_table': 'person',
                'managed': True,
            },
            bases=('core.entity',),
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('entity_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='core.Entity')),
            ],
            options={
                'db_table': 'product',
                'managed': True,
            },
            bases=('core.entity',),
        ),
        migrations.CreateModel(
            name='Ticker',
            fields=[
                ('entity_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='core.Entity')),
                ('symbol', models.CharField(db_column='symbol', max_length=20)),
                ('ticker_company', models.ForeignKey(db_column='company_id', on_delete=django.db.models.deletion.DO_NOTHING, related_name='tickers', to='core.Company')),
                ('ticker_exchange', models.ForeignKey(db_column='exchange_id', on_delete=django.db.models.deletion.DO_NOTHING, related_name='tickers', to='core.Exchange')),
            ],
            options={
                'db_table': 'ticker',
                'managed': True,
                'unique_together': {('ticker_exchange', 'symbol')},
            },
            bases=('core.entity',),
        ),
        migrations.CreateModel(
            name='Website',
            fields=[
                ('id', models.AutoField(db_column='id', primary_key=True, serialize=False)),
                ('name', models.CharField(db_column='name', max_length=255)),
                ('description', models.CharField(blank=True, db_column='description', max_length=1020, null=True)),
                ('url', models.CharField(db_column='url', max_length=2040)),
                ('login_script', models.TextField(blank=True, db_column='login_script', null=True)),
                ('credentials', models.ForeignKey(blank=True, db_column='credentials_id', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='core.Credentials')),
            ],
            options={
                'db_table': 'website',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='TickType',
            fields=[
                ('id', models.AutoField(db_column='id', primary_key=True, serialize=False)),
                ('name', models.CharField(db_column='name', max_length=510)),
                ('description', models.CharField(blank=True, db_column='description', max_length=1020, null=True)),
                ('params', models.CharField(blank=True, db_column='params', max_length=5000, null=True)),
                ('fill', models.ForeignKey(db_column='fill_id', on_delete=django.db.models.deletion.DO_NOTHING, to='core.Fill')),
                ('frequency', models.ForeignKey(db_column='frequency_id', on_delete=django.db.models.deletion.DO_NOTHING, to='core.Frequency')),
                ('function', models.ForeignKey(db_column='function_id', on_delete=django.db.models.deletion.DO_NOTHING, to='core.Function')),
            ],
            options={
                'db_table': 'tick_type',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Tick',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.FloatField(db_column='value')),
                ('date', models.DateTimeField(db_column='date')),
                ('tick_type', models.ForeignKey(db_column='tick_type_id', on_delete=django.db.models.deletion.DO_NOTHING, to='core.TickType')),
            ],
            options={
                'db_table': 'tick',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='ThreadSeriesLoad',
            fields=[
                ('id', models.AutoField(db_column='id', primary_key=True, serialize=False)),
                ('start_date', models.DateTimeField(db_column='start_date')),
                ('end_date', models.DateTimeField(db_column='end_date')),
                ('thread_series', models.ForeignKey(db_column='thread_series_id', on_delete=django.db.models.deletion.DO_NOTHING, to='core.ThreadSeries')),
            ],
            options={
                'db_table': 'thread_series_load',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='ThreadLoad',
            fields=[
                ('id', models.AutoField(db_column='id', primary_key=True, serialize=False)),
                ('start_date', models.DateTimeField(db_column='start_date')),
                ('end_date', models.DateTimeField(db_column='end_date')),
                ('thread', models.ForeignKey(db_column='thread_id', on_delete=django.db.models.deletion.DO_NOTHING, to='core.Thread')),
            ],
            options={
                'db_table': 'thread_load',
                'managed': True,
            },
        ),
        migrations.AddField(
            model_name='thread',
            name='thread_series',
            field=models.ForeignKey(db_column='thread_series_id', on_delete=django.db.models.deletion.DO_NOTHING, to='core.ThreadSeries'),
        ),
        migrations.CreateModel(
            name='TagTagGroup',
            fields=[
                ('id', models.AutoField(db_column='id', primary_key=True, serialize=False)),
                ('tag', models.ForeignKey(db_column='tag_id', on_delete=django.db.models.deletion.DO_NOTHING, to='core.Tag')),
                ('tag_group', models.ForeignKey(db_column='tag_group_id', on_delete=django.db.models.deletion.DO_NOTHING, to='core.TagGroup')),
            ],
            options={
                'db_table': 'tag_tag_group',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='TagGroupTagGroup',
            fields=[
                ('id', models.AutoField(db_column='id', primary_key=True, serialize=False)),
                ('tag_group1', models.ForeignKey(db_column='tag_group_id1', on_delete=django.db.models.deletion.DO_NOTHING, related_name='tag_group_id1', to='core.TagGroup')),
                ('tag_group2', models.ForeignKey(db_column='tag_group_id2', on_delete=django.db.models.deletion.DO_NOTHING, related_name='tag_group_id2', to='core.TagGroup')),
            ],
            options={
                'db_table': 'tag_group_tag_group',
                'managed': True,
            },
        ),
        migrations.AddField(
            model_name='taggroup',
            name='tag_groups',
            field=models.ManyToManyField(through='core.TagGroupTagGroup', to='core.TagGroup'),
        ),
        migrations.AddField(
            model_name='taggroup',
            name='tags',
            field=models.ManyToManyField(through='core.TagTagGroup', to='core.Tag'),
        ),
        migrations.CreateModel(
            name='TagEntity',
            fields=[
                ('id', models.AutoField(db_column='id', primary_key=True, serialize=False)),
                ('entity', models.ForeignKey(db_column='entity_id', on_delete=django.db.models.deletion.DO_NOTHING, related_name='entity', to='core.Entity')),
                ('tag', models.ForeignKey(db_column='tag_id', on_delete=django.db.models.deletion.DO_NOTHING, related_name='tag', to='core.Tag')),
            ],
            options={
                'db_table': 'tag_entity',
                'managed': True,
            },
        ),
        migrations.AddField(
            model_name='source',
            name='website',
            field=models.ForeignKey(db_column='website_id', on_delete=django.db.models.deletion.DO_NOTHING, to='core.Website'),
        ),
        migrations.CreateModel(
            name='Series',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tick_type', models.ForeignKey(db_column='tick_type_id', on_delete=django.db.models.deletion.DO_NOTHING, to='core.TickType')),
            ],
            options={
                'db_table': 'series',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Score',
            fields=[
                ('id', models.AutoField(db_column='id', primary_key=True, serialize=False)),
                ('value', models.FloatField(db_column='value')),
                ('metric', models.ForeignKey(db_column='metric_id', on_delete=django.db.models.deletion.DO_NOTHING, to='core.Metric')),
                ('prediction_set', models.ForeignKey(db_column='prediction_set_id', on_delete=django.db.models.deletion.DO_NOTHING, to='core.PredictionSet')),
            ],
            options={
                'db_table': 'score',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Report',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_column='name', max_length=510)),
                ('description', models.CharField(blank=True, db_column='description', max_length=1020, null=True)),
                ('path', models.CharField(blank=True, db_column='path', max_length=1020, null=True)),
                ('sentiment', models.FloatField(blank=True, db_column='sentiment', null=True)),
                ('polarity', models.FloatField(blank=True, db_column='polarity', null=True)),
                ('subjectivity', models.FloatField(blank=True, db_column='subjectivity', null=True)),
                ('date', models.DateTimeField(db_column='date')),
                ('source', models.ForeignKey(db_column='source_id', on_delete=django.db.models.deletion.DO_NOTHING, to='core.Source')),
            ],
            options={
                'db_table': 'Report',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Prediction',
            fields=[
                ('id', models.AutoField(db_column='id', primary_key=True, serialize=False)),
                ('value', models.FloatField(db_column='value')),
                ('prediction_set', models.ForeignKey(db_column='prediction_set_id', on_delete=django.db.models.deletion.DO_NOTHING, related_name='predictions', to='core.PredictionSet')),
                ('tick_type', models.ForeignKey(db_column='tick_type_id', on_delete=django.db.models.deletion.DO_NOTHING, to='core.TickType')),
            ],
            options={
                'db_table': 'prediction',
                'managed': True,
            },
        ),
        migrations.AddField(
            model_name='model',
            name='model_config',
            field=models.ForeignKey(db_column='model_config_id', on_delete=django.db.models.deletion.DO_NOTHING, to='core.ModelConfig'),
        ),
        migrations.CreateModel(
            name='MetricMetric',
            fields=[
                ('id', models.AutoField(db_column='id', primary_key=True, serialize=False)),
                ('child_metric', models.ForeignKey(db_column='child_metric_id', on_delete=django.db.models.deletion.DO_NOTHING, related_name='child_metric_id', to='core.Metric')),
                ('parent_metric', models.ForeignKey(db_column='parent_metric_id', on_delete=django.db.models.deletion.DO_NOTHING, related_name='parent_metric_id', to='core.Metric')),
            ],
            options={
                'db_table': 'metric_metric',
                'managed': True,
            },
        ),
        migrations.AddField(
            model_name='metric',
            name='metrics',
            field=models.ManyToManyField(through='core.MetricMetric', to='core.Metric'),
        ),
        migrations.CreateModel(
            name='EntityEntity',
            fields=[
                ('id', models.AutoField(db_column='id', primary_key=True, serialize=False)),
                ('entity1', models.ForeignKey(db_column='entity_id1', on_delete=django.db.models.deletion.DO_NOTHING, related_name='entity1', to='core.Entity')),
                ('entity2', models.ForeignKey(db_column='entity_id2', on_delete=django.db.models.deletion.DO_NOTHING, related_name='entity2', to='core.Entity')),
            ],
            options={
                'db_table': 'entity_entity',
                'managed': True,
            },
        ),
        migrations.AddField(
            model_name='entity',
            name='related',
            field=models.ManyToManyField(related_name='entity_entities', through='core.EntityEntity', to='core.Entity'),
        ),
        migrations.AddField(
            model_name='entity',
            name='tags',
            field=models.ManyToManyField(related_name='entity_tags', through='core.TagEntity', to='core.Tag'),
        ),
        migrations.CreateModel(
            name='CommentCollection',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_processed', models.DateTimeField(db_column='date_processed')),
                ('source', models.ForeignKey(db_column='source_id', on_delete=django.db.models.deletion.DO_NOTHING, to='core.Source')),
                ('thread', models.ForeignKey(db_column='thread_id', on_delete=django.db.models.deletion.DO_NOTHING, to='core.Thread')),
            ],
            options={
                'db_table': 'comment_collection',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.TextField(db_column='contents')),
                ('sentiment', models.FloatField(blank=True, db_column='sentiment', null=True)),
                ('polarity', models.FloatField(blank=True, db_column='polarity', null=True)),
                ('subjectivity', models.FloatField(blank=True, db_column='subjectivity', null=True)),
                ('date', models.DateTimeField(db_column='date')),
                ('date_processed', models.DateTimeField(db_column='date_processed')),
                ('collection', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='core.CommentCollection')),
                ('source', models.ForeignKey(db_column='source_id', on_delete=django.db.models.deletion.DO_NOTHING, to='core.Source')),
            ],
            options={
                'db_table': 'comment',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='AssetOrder',
            fields=[
                ('id', models.AutoField(db_column='id', primary_key=True, serialize=False)),
                ('quantity', models.FloatField(db_column='quantity')),
                ('target', models.FloatField(db_column='target')),
                ('expiration_date', models.DateTimeField(db_column='expiration_date', null=True)),
                ('asset', models.ForeignKey(db_column='asset_id', on_delete=django.db.models.deletion.DO_NOTHING, to='core.Asset')),
                ('order_type', models.ForeignKey(db_column='order_type_id', on_delete=django.db.models.deletion.DO_NOTHING, to='core.OrderType')),
            ],
            options={
                'db_table': 'asset_order',
                'managed': True,
            },
        ),
        migrations.AddField(
            model_name='asset',
            name='asset_type',
            field=models.ForeignKey(db_column='asset_type_id', on_delete=django.db.models.deletion.DO_NOTHING, to='core.AssetType'),
        ),
        migrations.AddField(
            model_name='asset',
            name='entity',
            field=models.ForeignKey(db_column='entity_id', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='core.Entity'),
        ),
        migrations.AddField(
            model_name='asset',
            name='portfolio',
            field=models.ForeignKey(db_column='portfolio_id', on_delete=django.db.models.deletion.CASCADE, related_name='assets', to='core.Portfolio'),
        ),
        migrations.CreateModel(
            name='Article',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(db_column='title', max_length=510)),
                ('contents', models.TextField(db_column='contents')),
                ('sentiment', models.FloatField(blank=True, db_column='sentiment', null=True)),
                ('polarity', models.FloatField(blank=True, db_column='polarity', null=True)),
                ('subjectivity', models.FloatField(blank=True, db_column='subjectivity', null=True)),
                ('date', models.DateTimeField(db_column='date')),
                ('date_processed', models.DateTimeField(db_column='date_processed')),
                ('source', models.ForeignKey(db_column='source_id', on_delete=django.db.models.deletion.DO_NOTHING, to='core.Source')),
            ],
            options={
                'db_table': 'article',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Alias',
            fields=[
                ('id', models.AutoField(db_column='id', primary_key=True, serialize=False)),
                ('alias', models.CharField(db_column='alias', max_length=510)),
                ('entity', models.ForeignKey(db_column='entity_id', on_delete=django.db.models.deletion.DO_NOTHING, to='core.Entity')),
                ('language', models.ForeignKey(db_column='Language_id', on_delete=django.db.models.deletion.DO_NOTHING, to='core.Language')),
            ],
            options={
                'db_table': 'alias',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='UserPortfolio',
            fields=[
                ('id', models.AutoField(db_column='id', primary_key=True, serialize=False)),
                ('portfolio', models.ForeignKey(db_column='portfolio_id', on_delete=django.db.models.deletion.CASCADE, to='core.Portfolio')),
                ('portfolio_permission', models.ForeignKey(db_column='portfolio_permission_id', on_delete=django.db.models.deletion.DO_NOTHING, to='core.PortfolioPermission')),
                ('user', models.ForeignKey(db_column='user_id', on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'user_portfolio',
                'managed': True,
                'unique_together': {('user', 'portfolio', 'portfolio_permission')},
            },
        ),
        migrations.CreateModel(
            name='TickLoad',
            fields=[
                ('id', models.AutoField(db_column='id', primary_key=True, serialize=False)),
                ('start_date', models.DateTimeField(db_column='start_date')),
                ('end_date', models.DateTimeField(db_column='end_date')),
                ('tick_type', models.ForeignKey(db_column='tick_type_id', on_delete=django.db.models.deletion.DO_NOTHING, to='core.TickType')),
                ('ticker', models.ForeignKey(db_column='ticker_id', on_delete=django.db.models.deletion.DO_NOTHING, to='core.Ticker')),
            ],
            options={
                'db_table': 'tick_load',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='TickEntity',
            fields=[
                ('id', models.AutoField(db_column='id', primary_key=True, serialize=False)),
                ('entity', models.ForeignKey(db_column='entity_id', on_delete=django.db.models.deletion.DO_NOTHING, related_name='tick_entity', to='core.Entity')),
                ('tick', models.ForeignKey(db_column='tick_id', on_delete=django.db.models.deletion.DO_NOTHING, related_name='entity_tick', to='core.Tick')),
            ],
            options={
                'db_table': 'tick_entity',
                'managed': True,
                'unique_together': {('tick', 'entity')},
            },
        ),
        migrations.CreateModel(
            name='SeriesEntity',
            fields=[
                ('id', models.AutoField(db_column='id', primary_key=True, serialize=False)),
                ('entity', models.ForeignKey(db_column='entity_id', on_delete=django.db.models.deletion.DO_NOTHING, related_name='series_entity', to='core.Entity')),
                ('series', models.ForeignKey(db_column='series_id', on_delete=django.db.models.deletion.DO_NOTHING, related_name='entity_series', to='core.Series')),
            ],
            options={
                'db_table': 'series_entity',
                'managed': True,
                'unique_together': {('series', 'entity')},
            },
        ),
        migrations.CreateModel(
            name='ReportEntity',
            fields=[
                ('id', models.AutoField(db_column='id', primary_key=True, serialize=False)),
                ('entity', models.ForeignKey(db_column='entity_id', on_delete=django.db.models.deletion.DO_NOTHING, related_name='report_entity', to='core.Entity')),
                ('report', models.ForeignKey(db_column='report_id', on_delete=django.db.models.deletion.DO_NOTHING, related_name='entity_report', to='core.Report')),
            ],
            options={
                'db_table': 'report_entity',
                'managed': True,
                'unique_together': {('report', 'entity')},
            },
        ),
        migrations.CreateModel(
            name='ModelDataframe',
            fields=[
                ('id', models.AutoField(db_column='id', primary_key=True, serialize=False)),
                ('dataframe', models.ForeignKey(db_column='dataframe_id', on_delete=django.db.models.deletion.DO_NOTHING, to='core.Dataframe')),
                ('model', models.ForeignKey(db_column='model_id', on_delete=django.db.models.deletion.DO_NOTHING, to='core.Model')),
            ],
            options={
                'db_table': 'model_dataframe',
                'managed': True,
                'unique_together': {('model', 'dataframe')},
            },
        ),
        migrations.CreateModel(
            name='ModelConfigDataframe',
            fields=[
                ('id', models.AutoField(db_column='id', primary_key=True, serialize=False)),
                ('dataframe', models.ForeignKey(db_column='dataframe_id', on_delete=django.db.models.deletion.DO_NOTHING, to='core.Dataframe')),
                ('model_config', models.ForeignKey(db_column='model_config_id', on_delete=django.db.models.deletion.DO_NOTHING, to='core.ModelConfig')),
            ],
            options={
                'db_table': 'model_config_dataframe',
                'managed': True,
                'unique_together': {('model_config', 'dataframe')},
            },
        ),
        migrations.CreateModel(
            name='IndexTicker',
            fields=[
                ('id', models.AutoField(db_column='id', primary_key=True, serialize=False)),
                ('index', models.ForeignKey(db_column='index_id', on_delete=django.db.models.deletion.DO_NOTHING, to='core.Index')),
                ('ticker', models.ForeignKey(db_column='ticker_id', on_delete=django.db.models.deletion.DO_NOTHING, to='core.Ticker')),
            ],
            options={
                'db_table': 'index_company',
                'managed': True,
                'unique_together': {('index', 'ticker')},
            },
        ),
        migrations.AddField(
            model_name='index',
            name='tickers',
            field=models.ManyToManyField(through='core.IndexTicker', to='core.Ticker'),
        ),
        migrations.CreateModel(
            name='DataframeTickType',
            fields=[
                ('id', models.AutoField(db_column='id', primary_key=True, serialize=False)),
                ('relation', models.CharField(db_column='relation', max_length=32)),
                ('dataframe', models.ForeignKey(db_column='dataframe_id', on_delete=django.db.models.deletion.DO_NOTHING, to='core.Dataframe')),
                ('tick_type', models.ForeignKey(db_column='tick_type_id', on_delete=django.db.models.deletion.DO_NOTHING, to='core.TickType')),
            ],
            options={
                'db_table': 'dataframe_tick_type',
                'managed': True,
                'unique_together': {('tick_type', 'dataframe')},
            },
        ),
        migrations.CreateModel(
            name='CommentEntity',
            fields=[
                ('id', models.AutoField(db_column='id', primary_key=True, serialize=False)),
                ('comment', models.ForeignKey(db_column='comment_id', on_delete=django.db.models.deletion.DO_NOTHING, related_name='entity_comment', to='core.Comment')),
                ('entity', models.ForeignKey(db_column='entity_id', on_delete=django.db.models.deletion.DO_NOTHING, related_name='comment_entity', to='core.Entity')),
            ],
            options={
                'db_table': 'comment_entity',
                'managed': True,
                'unique_together': {('comment', 'entity')},
            },
        ),
        migrations.CreateModel(
            name='CommentCollectionEntity',
            fields=[
                ('id', models.AutoField(db_column='id', primary_key=True, serialize=False)),
                ('comment_collection', models.ForeignKey(db_column='comment_collection_id', on_delete=django.db.models.deletion.DO_NOTHING, related_name='entity_comment_collection', to='core.CommentCollection')),
                ('entity', models.ForeignKey(db_column='entity_id', on_delete=django.db.models.deletion.DO_NOTHING, related_name='comment_collection_entity', to='core.Entity')),
            ],
            options={
                'db_table': 'comment_collection_entity',
                'managed': True,
                'unique_together': {('comment_collection', 'entity')},
            },
        ),
        migrations.CreateModel(
            name='ArticleEntity',
            fields=[
                ('id', models.AutoField(db_column='id', primary_key=True, serialize=False)),
                ('article', models.ForeignKey(db_column='article_id', on_delete=django.db.models.deletion.DO_NOTHING, related_name='entity_article', to='core.Series')),
                ('entity', models.ForeignKey(db_column='entity_id', on_delete=django.db.models.deletion.DO_NOTHING, related_name='article_entity', to='core.Entity')),
            ],
            options={
                'db_table': 'article_entity',
                'managed': True,
                'unique_together': {('article', 'entity')},
            },
        ),
        migrations.CreateModel(
            name='ProductEntity',
            fields=[
                ('id', models.AutoField(db_column='id', primary_key=True, serialize=False)),
                ('entity', models.ForeignKey(db_column='entity_id', on_delete=django.db.models.deletion.DO_NOTHING, related_name='products_entities', to='core.Entity')),
                ('product', models.ForeignKey(db_column='product_id', on_delete=django.db.models.deletion.DO_NOTHING, related_name='entities_products', to='core.Product')),
            ],
            options={
                'db_table': 'product_entity',
                'managed': True,
                'unique_together': {('product', 'entity')},
            },
        ),
        migrations.CreateModel(
            name='PersonEntity',
            fields=[
                ('person_entity', models.AutoField(db_column='id', primary_key=True, serialize=False)),
                ('entity', models.ForeignKey(db_column='entity_id', on_delete=django.db.models.deletion.DO_NOTHING, related_name='peoples_entities', to='core.Entity')),
                ('person', models.ForeignKey(db_column='person_id', on_delete=django.db.models.deletion.DO_NOTHING, related_name='entities_people', to='core.Person')),
            ],
            options={
                'db_table': 'person_entity',
                'managed': True,
                'unique_together': {('person', 'entity')},
            },
        ),
        migrations.CreateModel(
            name='DataframeTicker',
            fields=[
                ('id', models.AutoField(db_column='id', primary_key=True, serialize=False)),
                ('relation', models.CharField(db_column='relation', max_length=32)),
                ('dataframe', models.ForeignKey(db_column='dataframe_id', on_delete=django.db.models.deletion.DO_NOTHING, to='core.Dataframe')),
                ('ticker', models.ForeignKey(db_column='entity_id', on_delete=django.db.models.deletion.DO_NOTHING, to='core.Ticker')),
            ],
            options={
                'db_table': 'dataframe_ticker',
                'managed': True,
                'unique_together': {('ticker', 'dataframe')},
            },
        ),
    ]
